//
// This file was generated by trpc_cpp_plugin which is a self-defined pb compiler plugin, do not edit it!!!
// All rights reserved by Tencent Corporation
//

#include "ssz_weixin_open_server.trpc.pb.h"

#include "trpc/server/rpc_async_method_handler.h"
#include "trpc/server/rpc_method_handler.h"

namespace ssz {

static const std::vector<std::vector<std::string_view>> WeiXinOpenService_method_names = {
  {"/ssz.WeiXinOpenService/GetAccessToken"},
};

WeiXinOpenService::WeiXinOpenService() {
  for (const std::string_view& method : WeiXinOpenService_method_names[0]) {
    AddRpcServiceMethod(new ::trpc::RpcServiceMethod(method.data(), ::trpc::MethodType::UNARY, new ::trpc::RpcMethodHandler<::ssz::GetAccessTokenRequest, ::ssz::GetAccessTokenResponse>(std::bind(&WeiXinOpenService::GetAccessToken, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3))));
  }
}

::trpc::Status WeiXinOpenService::GetAccessToken(::trpc::ServerContextPtr context, const ::ssz::GetAccessTokenRequest* request, ::ssz::GetAccessTokenResponse* response) {
  (void)context;
  (void)request;
  (void)response;
  return ::trpc::Status(-1, "");
}

AsyncWeiXinOpenService::AsyncWeiXinOpenService() : ::trpc::AsyncRpcServiceImpl() {
  for (const std::string_view& method : WeiXinOpenService_method_names[0]) {
    AddRpcServiceMethod(new ::trpc::RpcServiceMethod(method.data(), ::trpc::MethodType::UNARY, new ::trpc::AsyncRpcMethodHandler<::ssz::GetAccessTokenRequest, ::ssz::GetAccessTokenResponse>(std::bind(&AsyncWeiXinOpenService::GetAccessToken, this, std::placeholders::_1, std::placeholders::_2))));
  }
}

::trpc::Future<::ssz::GetAccessTokenResponse> AsyncWeiXinOpenService::GetAccessToken(const ::trpc::ServerContextPtr& context, const ::ssz::GetAccessTokenRequest* request) {
  return ::trpc::MakeExceptionFuture<::ssz::GetAccessTokenResponse>(::trpc::CommonException("Unimplemented"));
}

::trpc::Status WeiXinOpenServiceServiceProxy::GetAccessToken(const ::trpc::ClientContextPtr& context, const ::ssz::GetAccessTokenRequest& request, ::ssz::GetAccessTokenResponse* response) {
  if (context->GetFuncName().empty()) context->SetFuncName(WeiXinOpenService_method_names[0][0].data());
  return UnaryInvoke<::ssz::GetAccessTokenRequest, ::ssz::GetAccessTokenResponse>(context, request, response);
}

::trpc::Future<::ssz::GetAccessTokenResponse> WeiXinOpenServiceServiceProxy::AsyncGetAccessToken(const ::trpc::ClientContextPtr& context, const ::ssz::GetAccessTokenRequest& request) {
  if (context->GetFuncName().empty()) context->SetFuncName(WeiXinOpenService_method_names[0][0].data());
  return AsyncUnaryInvoke<::ssz::GetAccessTokenRequest, ::ssz::GetAccessTokenResponse>(context, request);
}

::trpc::Status WeiXinOpenServiceServiceProxy::GetAccessToken(const ::trpc::ClientContextPtr& context, const ::ssz::GetAccessTokenRequest& request) {
  if (context->GetFuncName().empty()) context->SetFuncName(WeiXinOpenService_method_names[0][0].data());
  return OnewayInvoke<::ssz::GetAccessTokenRequest>(context, request);
}

::trpc::Future<::ssz::GetAccessTokenResponse> AsyncWeiXinOpenServiceServiceProxy::GetAccessToken(const ::trpc::ClientContextPtr& context, const ::ssz::GetAccessTokenRequest& request) {
  if (context->GetFuncName().empty()) context->SetFuncName(WeiXinOpenService_method_names[0][0].data());
  return AsyncUnaryInvoke<::ssz::GetAccessTokenRequest, ::ssz::GetAccessTokenResponse>(context, request);
}

} // end namespace ssz