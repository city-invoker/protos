//
// This file was generated by trpc_cpp_plugin which is a self-defined pb compiler plugin, do not edit it!!!
// All rights reserved by Tencent Corporation
//

#pragma once

#include "trpc_template_server.pb.h"

#include "trpc/client/rpc_service_proxy.h"
#include "trpc/server/rpc_service_impl.h"

namespace trpc {
namespace sample {

class TrpcTemplateService : public ::trpc::RpcServiceImpl {
 public:
  TrpcTemplateService();

  virtual ::trpc::Status TrpcTemplateHandler(::trpc::ServerContextPtr context, const ::trpc::sample::TrpcTemplateReq* request, ::trpc::sample::TrpcTemplateRsp* response);
};

class AsyncTrpcTemplateService : public ::trpc::AsyncRpcServiceImpl {
 public:
  AsyncTrpcTemplateService();
  
  virtual ::trpc::Future<::trpc::sample::TrpcTemplateRsp> TrpcTemplateHandler(const ::trpc::ServerContextPtr& context, const ::trpc::sample::TrpcTemplateReq* request);
};

class TrpcTemplateServiceServiceProxy : public ::trpc::RpcServiceProxy {
 public:
  virtual ::trpc::Status TrpcTemplateHandler(const ::trpc::ClientContextPtr& context, const ::trpc::sample::TrpcTemplateReq& request, ::trpc::sample::TrpcTemplateRsp* response);
  virtual ::trpc::Future<::trpc::sample::TrpcTemplateRsp> AsyncTrpcTemplateHandler(const ::trpc::ClientContextPtr& context, const ::trpc::sample::TrpcTemplateReq& request);
  // oneway, only send
  virtual ::trpc::Status TrpcTemplateHandler(const ::trpc::ClientContextPtr& context, const ::trpc::sample::TrpcTemplateReq& request);
};

class AsyncTrpcTemplateServiceServiceProxy : public ::trpc::RpcServiceProxy {
 public:
  ::trpc::Future<::trpc::sample::TrpcTemplateRsp> TrpcTemplateHandler(const ::trpc::ClientContextPtr& context, const ::trpc::sample::TrpcTemplateReq& request);
  // TODO: one-way
};

} // end namespace sample
} // end namespace trpc