//
// This file was generated by trpc_cpp_plugin which is a self-defined pb compiler plugin, do not edit it!!!
// All rights reserved by Tencent Corporation
//

#include "trpc_template_server.trpc.pb.h"

#include "trpc/server/rpc_async_method_handler.h"
#include "trpc/server/rpc_method_handler.h"

namespace trpc {

static const std::vector<std::vector<std::string_view>> TrpcTemplateService_method_names = {
  {"/trpc.TrpcTemplateService/TrpcTemplateHandler"},
};

TrpcTemplateService::TrpcTemplateService() {
  for (const std::string_view& method : TrpcTemplateService_method_names[0]) {
    AddRpcServiceMethod(new ::trpc::RpcServiceMethod(method.data(), ::trpc::MethodType::UNARY, new ::trpc::RpcMethodHandler<::trpc::TrpcTemplateReq, ::trpc::TrpcTemplateRsp>(std::bind(&TrpcTemplateService::TrpcTemplateHandler, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3))));
  }
}

::trpc::Status TrpcTemplateService::TrpcTemplateHandler(::trpc::ServerContextPtr context, const ::trpc::TrpcTemplateReq* request, ::trpc::TrpcTemplateRsp* response) {
  (void)context;
  (void)request;
  (void)response;
  return ::trpc::Status(-1, "");
}

AsyncTrpcTemplateService::AsyncTrpcTemplateService() : ::trpc::AsyncRpcServiceImpl() {
  for (const std::string_view& method : TrpcTemplateService_method_names[0]) {
    AddRpcServiceMethod(new ::trpc::RpcServiceMethod(method.data(), ::trpc::MethodType::UNARY, new ::trpc::AsyncRpcMethodHandler<::trpc::TrpcTemplateReq, ::trpc::TrpcTemplateRsp>(std::bind(&AsyncTrpcTemplateService::TrpcTemplateHandler, this, std::placeholders::_1, std::placeholders::_2))));
  }
}

::trpc::Future<::trpc::TrpcTemplateRsp> AsyncTrpcTemplateService::TrpcTemplateHandler(const ::trpc::ServerContextPtr& context, const ::trpc::TrpcTemplateReq* request) {
  return ::trpc::MakeExceptionFuture<::trpc::TrpcTemplateRsp>(::trpc::CommonException("Unimplemented"));
}

::trpc::Status TrpcTemplateServiceServiceProxy::TrpcTemplateHandler(const ::trpc::ClientContextPtr& context, const ::trpc::TrpcTemplateReq& request, ::trpc::TrpcTemplateRsp* response) {
  if (context->GetFuncName().empty()) context->SetFuncName(TrpcTemplateService_method_names[0][0].data());
  return UnaryInvoke<::trpc::TrpcTemplateReq, ::trpc::TrpcTemplateRsp>(context, request, response);
}

::trpc::Future<::trpc::TrpcTemplateRsp> TrpcTemplateServiceServiceProxy::AsyncTrpcTemplateHandler(const ::trpc::ClientContextPtr& context, const ::trpc::TrpcTemplateReq& request) {
  if (context->GetFuncName().empty()) context->SetFuncName(TrpcTemplateService_method_names[0][0].data());
  return AsyncUnaryInvoke<::trpc::TrpcTemplateReq, ::trpc::TrpcTemplateRsp>(context, request);
}

::trpc::Status TrpcTemplateServiceServiceProxy::TrpcTemplateHandler(const ::trpc::ClientContextPtr& context, const ::trpc::TrpcTemplateReq& request) {
  if (context->GetFuncName().empty()) context->SetFuncName(TrpcTemplateService_method_names[0][0].data());
  return OnewayInvoke<::trpc::TrpcTemplateReq>(context, request);
}

::trpc::Future<::trpc::TrpcTemplateRsp> AsyncTrpcTemplateServiceServiceProxy::TrpcTemplateHandler(const ::trpc::ClientContextPtr& context, const ::trpc::TrpcTemplateReq& request) {
  if (context->GetFuncName().empty()) context->SetFuncName(TrpcTemplateService_method_names[0][0].data());
  return AsyncUnaryInvoke<::trpc::TrpcTemplateReq, ::trpc::TrpcTemplateRsp>(context, request);
}

} // end namespace trpc