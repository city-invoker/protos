// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trpc_template_server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_trpc_5ftemplate_5fserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_trpc_5ftemplate_5fserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_trpc_5ftemplate_5fserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_trpc_5ftemplate_5fserver_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_trpc_5ftemplate_5fserver_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_trpc_5ftemplate_5fserver_2eproto_metadata_getter(int index);
namespace trpc {
namespace sample {
class TrpcQueryUserReq;
struct TrpcQueryUserReqDefaultTypeInternal;
extern TrpcQueryUserReqDefaultTypeInternal _TrpcQueryUserReq_default_instance_;
class TrpcQueryUserRsp;
struct TrpcQueryUserRspDefaultTypeInternal;
extern TrpcQueryUserRspDefaultTypeInternal _TrpcQueryUserRsp_default_instance_;
class TrpcTemplateReq;
struct TrpcTemplateReqDefaultTypeInternal;
extern TrpcTemplateReqDefaultTypeInternal _TrpcTemplateReq_default_instance_;
class TrpcTemplateRsp;
struct TrpcTemplateRspDefaultTypeInternal;
extern TrpcTemplateRspDefaultTypeInternal _TrpcTemplateRsp_default_instance_;
}  // namespace sample
}  // namespace trpc
PROTOBUF_NAMESPACE_OPEN
template<> ::trpc::sample::TrpcQueryUserReq* Arena::CreateMaybeMessage<::trpc::sample::TrpcQueryUserReq>(Arena*);
template<> ::trpc::sample::TrpcQueryUserRsp* Arena::CreateMaybeMessage<::trpc::sample::TrpcQueryUserRsp>(Arena*);
template<> ::trpc::sample::TrpcTemplateReq* Arena::CreateMaybeMessage<::trpc::sample::TrpcTemplateReq>(Arena*);
template<> ::trpc::sample::TrpcTemplateRsp* Arena::CreateMaybeMessage<::trpc::sample::TrpcTemplateRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace trpc {
namespace sample {

// ===================================================================

class TrpcTemplateReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trpc.sample.TrpcTemplateReq) */ {
 public:
  inline TrpcTemplateReq() : TrpcTemplateReq(nullptr) {}
  virtual ~TrpcTemplateReq();
  explicit constexpr TrpcTemplateReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrpcTemplateReq(const TrpcTemplateReq& from);
  TrpcTemplateReq(TrpcTemplateReq&& from) noexcept
    : TrpcTemplateReq() {
    *this = ::std::move(from);
  }

  inline TrpcTemplateReq& operator=(const TrpcTemplateReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrpcTemplateReq& operator=(TrpcTemplateReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrpcTemplateReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrpcTemplateReq* internal_default_instance() {
    return reinterpret_cast<const TrpcTemplateReq*>(
               &_TrpcTemplateReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TrpcTemplateReq& a, TrpcTemplateReq& b) {
    a.Swap(&b);
  }
  inline void Swap(TrpcTemplateReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrpcTemplateReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrpcTemplateReq* New() const final {
    return CreateMaybeMessage<TrpcTemplateReq>(nullptr);
  }

  TrpcTemplateReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrpcTemplateReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrpcTemplateReq& from);
  void MergeFrom(const TrpcTemplateReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrpcTemplateReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trpc.sample.TrpcTemplateReq";
  }
  protected:
  explicit TrpcTemplateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_trpc_5ftemplate_5fserver_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 2,
    kAppidFieldNumber = 3,
    kMsgFieldNumber = 4,
    kQueryTypeFieldNumber = 1,
  };
  // string code = 2;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string appid = 3;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  const std::string& appid() const;
  void set_appid(const std::string& value);
  void set_appid(std::string&& value);
  void set_appid(const char* value);
  void set_appid(const char* value, size_t size);
  std::string* mutable_appid();
  std::string* release_appid();
  void set_allocated_appid(std::string* appid);
  private:
  const std::string& _internal_appid() const;
  void _internal_set_appid(const std::string& value);
  std::string* _internal_mutable_appid();
  public:

  // string msg = 4;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 query_type = 1;
  bool has_query_type() const;
  private:
  bool _internal_has_query_type() const;
  public:
  void clear_query_type();
  ::PROTOBUF_NAMESPACE_ID::int32 query_type() const;
  void set_query_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_query_type() const;
  void _internal_set_query_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:trpc.sample.TrpcTemplateReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 query_type_;
  friend struct ::TableStruct_trpc_5ftemplate_5fserver_2eproto;
};
// -------------------------------------------------------------------

class TrpcTemplateRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trpc.sample.TrpcTemplateRsp) */ {
 public:
  inline TrpcTemplateRsp() : TrpcTemplateRsp(nullptr) {}
  virtual ~TrpcTemplateRsp();
  explicit constexpr TrpcTemplateRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrpcTemplateRsp(const TrpcTemplateRsp& from);
  TrpcTemplateRsp(TrpcTemplateRsp&& from) noexcept
    : TrpcTemplateRsp() {
    *this = ::std::move(from);
  }

  inline TrpcTemplateRsp& operator=(const TrpcTemplateRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrpcTemplateRsp& operator=(TrpcTemplateRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrpcTemplateRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrpcTemplateRsp* internal_default_instance() {
    return reinterpret_cast<const TrpcTemplateRsp*>(
               &_TrpcTemplateRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TrpcTemplateRsp& a, TrpcTemplateRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(TrpcTemplateRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrpcTemplateRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrpcTemplateRsp* New() const final {
    return CreateMaybeMessage<TrpcTemplateRsp>(nullptr);
  }

  TrpcTemplateRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrpcTemplateRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrpcTemplateRsp& from);
  void MergeFrom(const TrpcTemplateRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrpcTemplateRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trpc.sample.TrpcTemplateRsp";
  }
  protected:
  explicit TrpcTemplateRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_trpc_5ftemplate_5fserver_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kSpidFieldNumber = 2,
    kMsgFieldNumber = 3,
  };
  // string uuid = 1;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string spid = 2;
  bool has_spid() const;
  private:
  bool _internal_has_spid() const;
  public:
  void clear_spid();
  const std::string& spid() const;
  void set_spid(const std::string& value);
  void set_spid(std::string&& value);
  void set_spid(const char* value);
  void set_spid(const char* value, size_t size);
  std::string* mutable_spid();
  std::string* release_spid();
  void set_allocated_spid(std::string* spid);
  private:
  const std::string& _internal_spid() const;
  void _internal_set_spid(const std::string& value);
  std::string* _internal_mutable_spid();
  public:

  // string msg = 3;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:trpc.sample.TrpcTemplateRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  friend struct ::TableStruct_trpc_5ftemplate_5fserver_2eproto;
};
// -------------------------------------------------------------------

class TrpcQueryUserReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trpc.sample.TrpcQueryUserReq) */ {
 public:
  inline TrpcQueryUserReq() : TrpcQueryUserReq(nullptr) {}
  virtual ~TrpcQueryUserReq();
  explicit constexpr TrpcQueryUserReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrpcQueryUserReq(const TrpcQueryUserReq& from);
  TrpcQueryUserReq(TrpcQueryUserReq&& from) noexcept
    : TrpcQueryUserReq() {
    *this = ::std::move(from);
  }

  inline TrpcQueryUserReq& operator=(const TrpcQueryUserReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrpcQueryUserReq& operator=(TrpcQueryUserReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrpcQueryUserReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrpcQueryUserReq* internal_default_instance() {
    return reinterpret_cast<const TrpcQueryUserReq*>(
               &_TrpcQueryUserReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TrpcQueryUserReq& a, TrpcQueryUserReq& b) {
    a.Swap(&b);
  }
  inline void Swap(TrpcQueryUserReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrpcQueryUserReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrpcQueryUserReq* New() const final {
    return CreateMaybeMessage<TrpcQueryUserReq>(nullptr);
  }

  TrpcQueryUserReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrpcQueryUserReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrpcQueryUserReq& from);
  void MergeFrom(const TrpcQueryUserReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrpcQueryUserReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trpc.sample.TrpcQueryUserReq";
  }
  protected:
  explicit TrpcQueryUserReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_trpc_5ftemplate_5fserver_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kSessionIdFieldNumber = 2,
  };
  // string uid = 1;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  const std::string& uid() const;
  void set_uid(const std::string& value);
  void set_uid(std::string&& value);
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  std::string* mutable_uid();
  std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  private:
  const std::string& _internal_uid() const;
  void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // string session_id = 2;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // @@protoc_insertion_point(class_scope:trpc.sample.TrpcQueryUserReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  friend struct ::TableStruct_trpc_5ftemplate_5fserver_2eproto;
};
// -------------------------------------------------------------------

class TrpcQueryUserRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trpc.sample.TrpcQueryUserRsp) */ {
 public:
  inline TrpcQueryUserRsp() : TrpcQueryUserRsp(nullptr) {}
  virtual ~TrpcQueryUserRsp();
  explicit constexpr TrpcQueryUserRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrpcQueryUserRsp(const TrpcQueryUserRsp& from);
  TrpcQueryUserRsp(TrpcQueryUserRsp&& from) noexcept
    : TrpcQueryUserRsp() {
    *this = ::std::move(from);
  }

  inline TrpcQueryUserRsp& operator=(const TrpcQueryUserRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrpcQueryUserRsp& operator=(TrpcQueryUserRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrpcQueryUserRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrpcQueryUserRsp* internal_default_instance() {
    return reinterpret_cast<const TrpcQueryUserRsp*>(
               &_TrpcQueryUserRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TrpcQueryUserRsp& a, TrpcQueryUserRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(TrpcQueryUserRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrpcQueryUserRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrpcQueryUserRsp* New() const final {
    return CreateMaybeMessage<TrpcQueryUserRsp>(nullptr);
  }

  TrpcQueryUserRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrpcQueryUserRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrpcQueryUserRsp& from);
  void MergeFrom(const TrpcQueryUserRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrpcQueryUserRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trpc.sample.TrpcQueryUserRsp";
  }
  protected:
  explicit TrpcQueryUserRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_trpc_5ftemplate_5fserver_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kSessionIdFieldNumber = 2,
    kMsgFieldNumber = 3,
  };
  // string uid = 1;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  const std::string& uid() const;
  void set_uid(const std::string& value);
  void set_uid(std::string&& value);
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  std::string* mutable_uid();
  std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  private:
  const std::string& _internal_uid() const;
  void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // string session_id = 2;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string msg = 3;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:trpc.sample.TrpcQueryUserRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  friend struct ::TableStruct_trpc_5ftemplate_5fserver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrpcTemplateReq

// int32 query_type = 1;
inline bool TrpcTemplateReq::_internal_has_query_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TrpcTemplateReq::has_query_type() const {
  return _internal_has_query_type();
}
inline void TrpcTemplateReq::clear_query_type() {
  query_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrpcTemplateReq::_internal_query_type() const {
  return query_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrpcTemplateReq::query_type() const {
  // @@protoc_insertion_point(field_get:trpc.sample.TrpcTemplateReq.query_type)
  return _internal_query_type();
}
inline void TrpcTemplateReq::_internal_set_query_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  query_type_ = value;
}
inline void TrpcTemplateReq::set_query_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_query_type(value);
  // @@protoc_insertion_point(field_set:trpc.sample.TrpcTemplateReq.query_type)
}

// string code = 2;
inline bool TrpcTemplateReq::_internal_has_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrpcTemplateReq::has_code() const {
  return _internal_has_code();
}
inline void TrpcTemplateReq::clear_code() {
  code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrpcTemplateReq::code() const {
  // @@protoc_insertion_point(field_get:trpc.sample.TrpcTemplateReq.code)
  return _internal_code();
}
inline void TrpcTemplateReq::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:trpc.sample.TrpcTemplateReq.code)
}
inline std::string* TrpcTemplateReq::mutable_code() {
  // @@protoc_insertion_point(field_mutable:trpc.sample.TrpcTemplateReq.code)
  return _internal_mutable_code();
}
inline const std::string& TrpcTemplateReq::_internal_code() const {
  return code_.Get();
}
inline void TrpcTemplateReq::_internal_set_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TrpcTemplateReq::set_code(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trpc.sample.TrpcTemplateReq.code)
}
inline void TrpcTemplateReq::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:trpc.sample.TrpcTemplateReq.code)
}
inline void TrpcTemplateReq::set_code(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trpc.sample.TrpcTemplateReq.code)
}
inline std::string* TrpcTemplateReq::_internal_mutable_code() {
  _has_bits_[0] |= 0x00000001u;
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TrpcTemplateReq::release_code() {
  // @@protoc_insertion_point(field_release:trpc.sample.TrpcTemplateReq.code)
  if (!_internal_has_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrpcTemplateReq::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trpc.sample.TrpcTemplateReq.code)
}

// string appid = 3;
inline bool TrpcTemplateReq::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrpcTemplateReq::has_appid() const {
  return _internal_has_appid();
}
inline void TrpcTemplateReq::clear_appid() {
  appid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TrpcTemplateReq::appid() const {
  // @@protoc_insertion_point(field_get:trpc.sample.TrpcTemplateReq.appid)
  return _internal_appid();
}
inline void TrpcTemplateReq::set_appid(const std::string& value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:trpc.sample.TrpcTemplateReq.appid)
}
inline std::string* TrpcTemplateReq::mutable_appid() {
  // @@protoc_insertion_point(field_mutable:trpc.sample.TrpcTemplateReq.appid)
  return _internal_mutable_appid();
}
inline const std::string& TrpcTemplateReq::_internal_appid() const {
  return appid_.Get();
}
inline void TrpcTemplateReq::_internal_set_appid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  appid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TrpcTemplateReq::set_appid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  appid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trpc.sample.TrpcTemplateReq.appid)
}
inline void TrpcTemplateReq::set_appid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  appid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:trpc.sample.TrpcTemplateReq.appid)
}
inline void TrpcTemplateReq::set_appid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  appid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trpc.sample.TrpcTemplateReq.appid)
}
inline std::string* TrpcTemplateReq::_internal_mutable_appid() {
  _has_bits_[0] |= 0x00000002u;
  return appid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TrpcTemplateReq::release_appid() {
  // @@protoc_insertion_point(field_release:trpc.sample.TrpcTemplateReq.appid)
  if (!_internal_has_appid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return appid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrpcTemplateReq::set_allocated_appid(std::string* appid) {
  if (appid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  appid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trpc.sample.TrpcTemplateReq.appid)
}

// string msg = 4;
inline bool TrpcTemplateReq::_internal_has_msg() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrpcTemplateReq::has_msg() const {
  return _internal_has_msg();
}
inline void TrpcTemplateReq::clear_msg() {
  msg_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TrpcTemplateReq::msg() const {
  // @@protoc_insertion_point(field_get:trpc.sample.TrpcTemplateReq.msg)
  return _internal_msg();
}
inline void TrpcTemplateReq::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:trpc.sample.TrpcTemplateReq.msg)
}
inline std::string* TrpcTemplateReq::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:trpc.sample.TrpcTemplateReq.msg)
  return _internal_mutable_msg();
}
inline const std::string& TrpcTemplateReq::_internal_msg() const {
  return msg_.Get();
}
inline void TrpcTemplateReq::_internal_set_msg(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TrpcTemplateReq::set_msg(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trpc.sample.TrpcTemplateReq.msg)
}
inline void TrpcTemplateReq::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:trpc.sample.TrpcTemplateReq.msg)
}
inline void TrpcTemplateReq::set_msg(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trpc.sample.TrpcTemplateReq.msg)
}
inline std::string* TrpcTemplateReq::_internal_mutable_msg() {
  _has_bits_[0] |= 0x00000004u;
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TrpcTemplateReq::release_msg() {
  // @@protoc_insertion_point(field_release:trpc.sample.TrpcTemplateReq.msg)
  if (!_internal_has_msg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return msg_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrpcTemplateReq::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trpc.sample.TrpcTemplateReq.msg)
}

// -------------------------------------------------------------------

// TrpcTemplateRsp

// string uuid = 1;
inline bool TrpcTemplateRsp::_internal_has_uuid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrpcTemplateRsp::has_uuid() const {
  return _internal_has_uuid();
}
inline void TrpcTemplateRsp::clear_uuid() {
  uuid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrpcTemplateRsp::uuid() const {
  // @@protoc_insertion_point(field_get:trpc.sample.TrpcTemplateRsp.uuid)
  return _internal_uuid();
}
inline void TrpcTemplateRsp::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:trpc.sample.TrpcTemplateRsp.uuid)
}
inline std::string* TrpcTemplateRsp::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:trpc.sample.TrpcTemplateRsp.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& TrpcTemplateRsp::_internal_uuid() const {
  return uuid_.Get();
}
inline void TrpcTemplateRsp::_internal_set_uuid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TrpcTemplateRsp::set_uuid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  uuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trpc.sample.TrpcTemplateRsp.uuid)
}
inline void TrpcTemplateRsp::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:trpc.sample.TrpcTemplateRsp.uuid)
}
inline void TrpcTemplateRsp::set_uuid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trpc.sample.TrpcTemplateRsp.uuid)
}
inline std::string* TrpcTemplateRsp::_internal_mutable_uuid() {
  _has_bits_[0] |= 0x00000001u;
  return uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TrpcTemplateRsp::release_uuid() {
  // @@protoc_insertion_point(field_release:trpc.sample.TrpcTemplateRsp.uuid)
  if (!_internal_has_uuid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return uuid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrpcTemplateRsp::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trpc.sample.TrpcTemplateRsp.uuid)
}

// string spid = 2;
inline bool TrpcTemplateRsp::_internal_has_spid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrpcTemplateRsp::has_spid() const {
  return _internal_has_spid();
}
inline void TrpcTemplateRsp::clear_spid() {
  spid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TrpcTemplateRsp::spid() const {
  // @@protoc_insertion_point(field_get:trpc.sample.TrpcTemplateRsp.spid)
  return _internal_spid();
}
inline void TrpcTemplateRsp::set_spid(const std::string& value) {
  _internal_set_spid(value);
  // @@protoc_insertion_point(field_set:trpc.sample.TrpcTemplateRsp.spid)
}
inline std::string* TrpcTemplateRsp::mutable_spid() {
  // @@protoc_insertion_point(field_mutable:trpc.sample.TrpcTemplateRsp.spid)
  return _internal_mutable_spid();
}
inline const std::string& TrpcTemplateRsp::_internal_spid() const {
  return spid_.Get();
}
inline void TrpcTemplateRsp::_internal_set_spid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  spid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TrpcTemplateRsp::set_spid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  spid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trpc.sample.TrpcTemplateRsp.spid)
}
inline void TrpcTemplateRsp::set_spid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  spid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:trpc.sample.TrpcTemplateRsp.spid)
}
inline void TrpcTemplateRsp::set_spid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  spid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trpc.sample.TrpcTemplateRsp.spid)
}
inline std::string* TrpcTemplateRsp::_internal_mutable_spid() {
  _has_bits_[0] |= 0x00000002u;
  return spid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TrpcTemplateRsp::release_spid() {
  // @@protoc_insertion_point(field_release:trpc.sample.TrpcTemplateRsp.spid)
  if (!_internal_has_spid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return spid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrpcTemplateRsp::set_allocated_spid(std::string* spid) {
  if (spid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  spid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trpc.sample.TrpcTemplateRsp.spid)
}

// string msg = 3;
inline bool TrpcTemplateRsp::_internal_has_msg() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrpcTemplateRsp::has_msg() const {
  return _internal_has_msg();
}
inline void TrpcTemplateRsp::clear_msg() {
  msg_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TrpcTemplateRsp::msg() const {
  // @@protoc_insertion_point(field_get:trpc.sample.TrpcTemplateRsp.msg)
  return _internal_msg();
}
inline void TrpcTemplateRsp::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:trpc.sample.TrpcTemplateRsp.msg)
}
inline std::string* TrpcTemplateRsp::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:trpc.sample.TrpcTemplateRsp.msg)
  return _internal_mutable_msg();
}
inline const std::string& TrpcTemplateRsp::_internal_msg() const {
  return msg_.Get();
}
inline void TrpcTemplateRsp::_internal_set_msg(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TrpcTemplateRsp::set_msg(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trpc.sample.TrpcTemplateRsp.msg)
}
inline void TrpcTemplateRsp::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:trpc.sample.TrpcTemplateRsp.msg)
}
inline void TrpcTemplateRsp::set_msg(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trpc.sample.TrpcTemplateRsp.msg)
}
inline std::string* TrpcTemplateRsp::_internal_mutable_msg() {
  _has_bits_[0] |= 0x00000004u;
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TrpcTemplateRsp::release_msg() {
  // @@protoc_insertion_point(field_release:trpc.sample.TrpcTemplateRsp.msg)
  if (!_internal_has_msg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return msg_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrpcTemplateRsp::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trpc.sample.TrpcTemplateRsp.msg)
}

// -------------------------------------------------------------------

// TrpcQueryUserReq

// string uid = 1;
inline bool TrpcQueryUserReq::_internal_has_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrpcQueryUserReq::has_uid() const {
  return _internal_has_uid();
}
inline void TrpcQueryUserReq::clear_uid() {
  uid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrpcQueryUserReq::uid() const {
  // @@protoc_insertion_point(field_get:trpc.sample.TrpcQueryUserReq.uid)
  return _internal_uid();
}
inline void TrpcQueryUserReq::set_uid(const std::string& value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:trpc.sample.TrpcQueryUserReq.uid)
}
inline std::string* TrpcQueryUserReq::mutable_uid() {
  // @@protoc_insertion_point(field_mutable:trpc.sample.TrpcQueryUserReq.uid)
  return _internal_mutable_uid();
}
inline const std::string& TrpcQueryUserReq::_internal_uid() const {
  return uid_.Get();
}
inline void TrpcQueryUserReq::_internal_set_uid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TrpcQueryUserReq::set_uid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  uid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trpc.sample.TrpcQueryUserReq.uid)
}
inline void TrpcQueryUserReq::set_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:trpc.sample.TrpcQueryUserReq.uid)
}
inline void TrpcQueryUserReq::set_uid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trpc.sample.TrpcQueryUserReq.uid)
}
inline std::string* TrpcQueryUserReq::_internal_mutable_uid() {
  _has_bits_[0] |= 0x00000001u;
  return uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TrpcQueryUserReq::release_uid() {
  // @@protoc_insertion_point(field_release:trpc.sample.TrpcQueryUserReq.uid)
  if (!_internal_has_uid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return uid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrpcQueryUserReq::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trpc.sample.TrpcQueryUserReq.uid)
}

// string session_id = 2;
inline bool TrpcQueryUserReq::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrpcQueryUserReq::has_session_id() const {
  return _internal_has_session_id();
}
inline void TrpcQueryUserReq::clear_session_id() {
  session_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TrpcQueryUserReq::session_id() const {
  // @@protoc_insertion_point(field_get:trpc.sample.TrpcQueryUserReq.session_id)
  return _internal_session_id();
}
inline void TrpcQueryUserReq::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:trpc.sample.TrpcQueryUserReq.session_id)
}
inline std::string* TrpcQueryUserReq::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:trpc.sample.TrpcQueryUserReq.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& TrpcQueryUserReq::_internal_session_id() const {
  return session_id_.Get();
}
inline void TrpcQueryUserReq::_internal_set_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TrpcQueryUserReq::set_session_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trpc.sample.TrpcQueryUserReq.session_id)
}
inline void TrpcQueryUserReq::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:trpc.sample.TrpcQueryUserReq.session_id)
}
inline void TrpcQueryUserReq::set_session_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trpc.sample.TrpcQueryUserReq.session_id)
}
inline std::string* TrpcQueryUserReq::_internal_mutable_session_id() {
  _has_bits_[0] |= 0x00000002u;
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TrpcQueryUserReq::release_session_id() {
  // @@protoc_insertion_point(field_release:trpc.sample.TrpcQueryUserReq.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return session_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrpcQueryUserReq::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trpc.sample.TrpcQueryUserReq.session_id)
}

// -------------------------------------------------------------------

// TrpcQueryUserRsp

// string uid = 1;
inline bool TrpcQueryUserRsp::_internal_has_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrpcQueryUserRsp::has_uid() const {
  return _internal_has_uid();
}
inline void TrpcQueryUserRsp::clear_uid() {
  uid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrpcQueryUserRsp::uid() const {
  // @@protoc_insertion_point(field_get:trpc.sample.TrpcQueryUserRsp.uid)
  return _internal_uid();
}
inline void TrpcQueryUserRsp::set_uid(const std::string& value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:trpc.sample.TrpcQueryUserRsp.uid)
}
inline std::string* TrpcQueryUserRsp::mutable_uid() {
  // @@protoc_insertion_point(field_mutable:trpc.sample.TrpcQueryUserRsp.uid)
  return _internal_mutable_uid();
}
inline const std::string& TrpcQueryUserRsp::_internal_uid() const {
  return uid_.Get();
}
inline void TrpcQueryUserRsp::_internal_set_uid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TrpcQueryUserRsp::set_uid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  uid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trpc.sample.TrpcQueryUserRsp.uid)
}
inline void TrpcQueryUserRsp::set_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:trpc.sample.TrpcQueryUserRsp.uid)
}
inline void TrpcQueryUserRsp::set_uid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trpc.sample.TrpcQueryUserRsp.uid)
}
inline std::string* TrpcQueryUserRsp::_internal_mutable_uid() {
  _has_bits_[0] |= 0x00000001u;
  return uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TrpcQueryUserRsp::release_uid() {
  // @@protoc_insertion_point(field_release:trpc.sample.TrpcQueryUserRsp.uid)
  if (!_internal_has_uid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return uid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrpcQueryUserRsp::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trpc.sample.TrpcQueryUserRsp.uid)
}

// string session_id = 2;
inline bool TrpcQueryUserRsp::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrpcQueryUserRsp::has_session_id() const {
  return _internal_has_session_id();
}
inline void TrpcQueryUserRsp::clear_session_id() {
  session_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TrpcQueryUserRsp::session_id() const {
  // @@protoc_insertion_point(field_get:trpc.sample.TrpcQueryUserRsp.session_id)
  return _internal_session_id();
}
inline void TrpcQueryUserRsp::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:trpc.sample.TrpcQueryUserRsp.session_id)
}
inline std::string* TrpcQueryUserRsp::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:trpc.sample.TrpcQueryUserRsp.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& TrpcQueryUserRsp::_internal_session_id() const {
  return session_id_.Get();
}
inline void TrpcQueryUserRsp::_internal_set_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TrpcQueryUserRsp::set_session_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trpc.sample.TrpcQueryUserRsp.session_id)
}
inline void TrpcQueryUserRsp::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:trpc.sample.TrpcQueryUserRsp.session_id)
}
inline void TrpcQueryUserRsp::set_session_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trpc.sample.TrpcQueryUserRsp.session_id)
}
inline std::string* TrpcQueryUserRsp::_internal_mutable_session_id() {
  _has_bits_[0] |= 0x00000002u;
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TrpcQueryUserRsp::release_session_id() {
  // @@protoc_insertion_point(field_release:trpc.sample.TrpcQueryUserRsp.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return session_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrpcQueryUserRsp::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trpc.sample.TrpcQueryUserRsp.session_id)
}

// string msg = 3;
inline bool TrpcQueryUserRsp::_internal_has_msg() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrpcQueryUserRsp::has_msg() const {
  return _internal_has_msg();
}
inline void TrpcQueryUserRsp::clear_msg() {
  msg_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TrpcQueryUserRsp::msg() const {
  // @@protoc_insertion_point(field_get:trpc.sample.TrpcQueryUserRsp.msg)
  return _internal_msg();
}
inline void TrpcQueryUserRsp::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:trpc.sample.TrpcQueryUserRsp.msg)
}
inline std::string* TrpcQueryUserRsp::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:trpc.sample.TrpcQueryUserRsp.msg)
  return _internal_mutable_msg();
}
inline const std::string& TrpcQueryUserRsp::_internal_msg() const {
  return msg_.Get();
}
inline void TrpcQueryUserRsp::_internal_set_msg(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TrpcQueryUserRsp::set_msg(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trpc.sample.TrpcQueryUserRsp.msg)
}
inline void TrpcQueryUserRsp::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:trpc.sample.TrpcQueryUserRsp.msg)
}
inline void TrpcQueryUserRsp::set_msg(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trpc.sample.TrpcQueryUserRsp.msg)
}
inline std::string* TrpcQueryUserRsp::_internal_mutable_msg() {
  _has_bits_[0] |= 0x00000004u;
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TrpcQueryUserRsp::release_msg() {
  // @@protoc_insertion_point(field_release:trpc.sample.TrpcQueryUserRsp.msg)
  if (!_internal_has_msg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return msg_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrpcQueryUserRsp::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trpc.sample.TrpcQueryUserRsp.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sample
}  // namespace trpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_trpc_5ftemplate_5fserver_2eproto
