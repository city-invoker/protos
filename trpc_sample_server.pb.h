// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trpc_sample_server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_trpc_5fsample_5fserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_trpc_5fsample_5fserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_trpc_5fsample_5fserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_trpc_5fsample_5fserver_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_trpc_5fsample_5fserver_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_trpc_5fsample_5fserver_2eproto_metadata_getter(int index);
namespace trpc {
namespace sample {
class TrpcSampleReq;
struct TrpcSampleReqDefaultTypeInternal;
extern TrpcSampleReqDefaultTypeInternal _TrpcSampleReq_default_instance_;
class TrpcSampleRsp;
struct TrpcSampleRspDefaultTypeInternal;
extern TrpcSampleRspDefaultTypeInternal _TrpcSampleRsp_default_instance_;
}  // namespace sample
}  // namespace trpc
PROTOBUF_NAMESPACE_OPEN
template<> ::trpc::sample::TrpcSampleReq* Arena::CreateMaybeMessage<::trpc::sample::TrpcSampleReq>(Arena*);
template<> ::trpc::sample::TrpcSampleRsp* Arena::CreateMaybeMessage<::trpc::sample::TrpcSampleRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace trpc {
namespace sample {

// ===================================================================

class TrpcSampleReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trpc.sample.TrpcSampleReq) */ {
 public:
  inline TrpcSampleReq() : TrpcSampleReq(nullptr) {}
  virtual ~TrpcSampleReq();
  explicit constexpr TrpcSampleReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrpcSampleReq(const TrpcSampleReq& from);
  TrpcSampleReq(TrpcSampleReq&& from) noexcept
    : TrpcSampleReq() {
    *this = ::std::move(from);
  }

  inline TrpcSampleReq& operator=(const TrpcSampleReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrpcSampleReq& operator=(TrpcSampleReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrpcSampleReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrpcSampleReq* internal_default_instance() {
    return reinterpret_cast<const TrpcSampleReq*>(
               &_TrpcSampleReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TrpcSampleReq& a, TrpcSampleReq& b) {
    a.Swap(&b);
  }
  inline void Swap(TrpcSampleReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrpcSampleReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrpcSampleReq* New() const final {
    return CreateMaybeMessage<TrpcSampleReq>(nullptr);
  }

  TrpcSampleReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrpcSampleReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrpcSampleReq& from);
  void MergeFrom(const TrpcSampleReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrpcSampleReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trpc.sample.TrpcSampleReq";
  }
  protected:
  explicit TrpcSampleReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_trpc_5fsample_5fserver_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 2,
    kAppidFieldNumber = 3,
    kMsgFieldNumber = 4,
    kQueryTypeFieldNumber = 1,
  };
  // string code = 2;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string appid = 3;
  void clear_appid();
  const std::string& appid() const;
  void set_appid(const std::string& value);
  void set_appid(std::string&& value);
  void set_appid(const char* value);
  void set_appid(const char* value, size_t size);
  std::string* mutable_appid();
  std::string* release_appid();
  void set_allocated_appid(std::string* appid);
  private:
  const std::string& _internal_appid() const;
  void _internal_set_appid(const std::string& value);
  std::string* _internal_mutable_appid();
  public:

  // string msg = 4;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 query_type = 1;
  void clear_query_type();
  ::PROTOBUF_NAMESPACE_ID::int32 query_type() const;
  void set_query_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_query_type() const;
  void _internal_set_query_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:trpc.sample.TrpcSampleReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 query_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trpc_5fsample_5fserver_2eproto;
};
// -------------------------------------------------------------------

class TrpcSampleRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trpc.sample.TrpcSampleRsp) */ {
 public:
  inline TrpcSampleRsp() : TrpcSampleRsp(nullptr) {}
  virtual ~TrpcSampleRsp();
  explicit constexpr TrpcSampleRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrpcSampleRsp(const TrpcSampleRsp& from);
  TrpcSampleRsp(TrpcSampleRsp&& from) noexcept
    : TrpcSampleRsp() {
    *this = ::std::move(from);
  }

  inline TrpcSampleRsp& operator=(const TrpcSampleRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrpcSampleRsp& operator=(TrpcSampleRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrpcSampleRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrpcSampleRsp* internal_default_instance() {
    return reinterpret_cast<const TrpcSampleRsp*>(
               &_TrpcSampleRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TrpcSampleRsp& a, TrpcSampleRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(TrpcSampleRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrpcSampleRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrpcSampleRsp* New() const final {
    return CreateMaybeMessage<TrpcSampleRsp>(nullptr);
  }

  TrpcSampleRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrpcSampleRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrpcSampleRsp& from);
  void MergeFrom(const TrpcSampleRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrpcSampleRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trpc.sample.TrpcSampleRsp";
  }
  protected:
  explicit TrpcSampleRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_trpc_5fsample_5fserver_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kSpidFieldNumber = 2,
    kMsgFieldNumber = 3,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string spid = 2;
  void clear_spid();
  const std::string& spid() const;
  void set_spid(const std::string& value);
  void set_spid(std::string&& value);
  void set_spid(const char* value);
  void set_spid(const char* value, size_t size);
  std::string* mutable_spid();
  std::string* release_spid();
  void set_allocated_spid(std::string* spid);
  private:
  const std::string& _internal_spid() const;
  void _internal_set_spid(const std::string& value);
  std::string* _internal_mutable_spid();
  public:

  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:trpc.sample.TrpcSampleRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trpc_5fsample_5fserver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrpcSampleReq

// int32 query_type = 1;
inline void TrpcSampleReq::clear_query_type() {
  query_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrpcSampleReq::_internal_query_type() const {
  return query_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrpcSampleReq::query_type() const {
  // @@protoc_insertion_point(field_get:trpc.sample.TrpcSampleReq.query_type)
  return _internal_query_type();
}
inline void TrpcSampleReq::_internal_set_query_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  query_type_ = value;
}
inline void TrpcSampleReq::set_query_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_query_type(value);
  // @@protoc_insertion_point(field_set:trpc.sample.TrpcSampleReq.query_type)
}

// string code = 2;
inline void TrpcSampleReq::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& TrpcSampleReq::code() const {
  // @@protoc_insertion_point(field_get:trpc.sample.TrpcSampleReq.code)
  return _internal_code();
}
inline void TrpcSampleReq::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:trpc.sample.TrpcSampleReq.code)
}
inline std::string* TrpcSampleReq::mutable_code() {
  // @@protoc_insertion_point(field_mutable:trpc.sample.TrpcSampleReq.code)
  return _internal_mutable_code();
}
inline const std::string& TrpcSampleReq::_internal_code() const {
  return code_.Get();
}
inline void TrpcSampleReq::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TrpcSampleReq::set_code(std::string&& value) {
  
  code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trpc.sample.TrpcSampleReq.code)
}
inline void TrpcSampleReq::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:trpc.sample.TrpcSampleReq.code)
}
inline void TrpcSampleReq::set_code(const char* value,
    size_t size) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trpc.sample.TrpcSampleReq.code)
}
inline std::string* TrpcSampleReq::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TrpcSampleReq::release_code() {
  // @@protoc_insertion_point(field_release:trpc.sample.TrpcSampleReq.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrpcSampleReq::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trpc.sample.TrpcSampleReq.code)
}

// string appid = 3;
inline void TrpcSampleReq::clear_appid() {
  appid_.ClearToEmpty();
}
inline const std::string& TrpcSampleReq::appid() const {
  // @@protoc_insertion_point(field_get:trpc.sample.TrpcSampleReq.appid)
  return _internal_appid();
}
inline void TrpcSampleReq::set_appid(const std::string& value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:trpc.sample.TrpcSampleReq.appid)
}
inline std::string* TrpcSampleReq::mutable_appid() {
  // @@protoc_insertion_point(field_mutable:trpc.sample.TrpcSampleReq.appid)
  return _internal_mutable_appid();
}
inline const std::string& TrpcSampleReq::_internal_appid() const {
  return appid_.Get();
}
inline void TrpcSampleReq::_internal_set_appid(const std::string& value) {
  
  appid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TrpcSampleReq::set_appid(std::string&& value) {
  
  appid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trpc.sample.TrpcSampleReq.appid)
}
inline void TrpcSampleReq::set_appid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  appid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:trpc.sample.TrpcSampleReq.appid)
}
inline void TrpcSampleReq::set_appid(const char* value,
    size_t size) {
  
  appid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trpc.sample.TrpcSampleReq.appid)
}
inline std::string* TrpcSampleReq::_internal_mutable_appid() {
  
  return appid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TrpcSampleReq::release_appid() {
  // @@protoc_insertion_point(field_release:trpc.sample.TrpcSampleReq.appid)
  return appid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrpcSampleReq::set_allocated_appid(std::string* appid) {
  if (appid != nullptr) {
    
  } else {
    
  }
  appid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trpc.sample.TrpcSampleReq.appid)
}

// string msg = 4;
inline void TrpcSampleReq::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& TrpcSampleReq::msg() const {
  // @@protoc_insertion_point(field_get:trpc.sample.TrpcSampleReq.msg)
  return _internal_msg();
}
inline void TrpcSampleReq::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:trpc.sample.TrpcSampleReq.msg)
}
inline std::string* TrpcSampleReq::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:trpc.sample.TrpcSampleReq.msg)
  return _internal_mutable_msg();
}
inline const std::string& TrpcSampleReq::_internal_msg() const {
  return msg_.Get();
}
inline void TrpcSampleReq::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TrpcSampleReq::set_msg(std::string&& value) {
  
  msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trpc.sample.TrpcSampleReq.msg)
}
inline void TrpcSampleReq::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:trpc.sample.TrpcSampleReq.msg)
}
inline void TrpcSampleReq::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trpc.sample.TrpcSampleReq.msg)
}
inline std::string* TrpcSampleReq::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TrpcSampleReq::release_msg() {
  // @@protoc_insertion_point(field_release:trpc.sample.TrpcSampleReq.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrpcSampleReq::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trpc.sample.TrpcSampleReq.msg)
}

// -------------------------------------------------------------------

// TrpcSampleRsp

// string uuid = 1;
inline void TrpcSampleRsp::clear_uuid() {
  uuid_.ClearToEmpty();
}
inline const std::string& TrpcSampleRsp::uuid() const {
  // @@protoc_insertion_point(field_get:trpc.sample.TrpcSampleRsp.uuid)
  return _internal_uuid();
}
inline void TrpcSampleRsp::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:trpc.sample.TrpcSampleRsp.uuid)
}
inline std::string* TrpcSampleRsp::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:trpc.sample.TrpcSampleRsp.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& TrpcSampleRsp::_internal_uuid() const {
  return uuid_.Get();
}
inline void TrpcSampleRsp::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TrpcSampleRsp::set_uuid(std::string&& value) {
  
  uuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trpc.sample.TrpcSampleRsp.uuid)
}
inline void TrpcSampleRsp::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:trpc.sample.TrpcSampleRsp.uuid)
}
inline void TrpcSampleRsp::set_uuid(const char* value,
    size_t size) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trpc.sample.TrpcSampleRsp.uuid)
}
inline std::string* TrpcSampleRsp::_internal_mutable_uuid() {
  
  return uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TrpcSampleRsp::release_uuid() {
  // @@protoc_insertion_point(field_release:trpc.sample.TrpcSampleRsp.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrpcSampleRsp::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trpc.sample.TrpcSampleRsp.uuid)
}

// string spid = 2;
inline void TrpcSampleRsp::clear_spid() {
  spid_.ClearToEmpty();
}
inline const std::string& TrpcSampleRsp::spid() const {
  // @@protoc_insertion_point(field_get:trpc.sample.TrpcSampleRsp.spid)
  return _internal_spid();
}
inline void TrpcSampleRsp::set_spid(const std::string& value) {
  _internal_set_spid(value);
  // @@protoc_insertion_point(field_set:trpc.sample.TrpcSampleRsp.spid)
}
inline std::string* TrpcSampleRsp::mutable_spid() {
  // @@protoc_insertion_point(field_mutable:trpc.sample.TrpcSampleRsp.spid)
  return _internal_mutable_spid();
}
inline const std::string& TrpcSampleRsp::_internal_spid() const {
  return spid_.Get();
}
inline void TrpcSampleRsp::_internal_set_spid(const std::string& value) {
  
  spid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TrpcSampleRsp::set_spid(std::string&& value) {
  
  spid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trpc.sample.TrpcSampleRsp.spid)
}
inline void TrpcSampleRsp::set_spid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  spid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:trpc.sample.TrpcSampleRsp.spid)
}
inline void TrpcSampleRsp::set_spid(const char* value,
    size_t size) {
  
  spid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trpc.sample.TrpcSampleRsp.spid)
}
inline std::string* TrpcSampleRsp::_internal_mutable_spid() {
  
  return spid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TrpcSampleRsp::release_spid() {
  // @@protoc_insertion_point(field_release:trpc.sample.TrpcSampleRsp.spid)
  return spid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrpcSampleRsp::set_allocated_spid(std::string* spid) {
  if (spid != nullptr) {
    
  } else {
    
  }
  spid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trpc.sample.TrpcSampleRsp.spid)
}

// string msg = 3;
inline void TrpcSampleRsp::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& TrpcSampleRsp::msg() const {
  // @@protoc_insertion_point(field_get:trpc.sample.TrpcSampleRsp.msg)
  return _internal_msg();
}
inline void TrpcSampleRsp::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:trpc.sample.TrpcSampleRsp.msg)
}
inline std::string* TrpcSampleRsp::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:trpc.sample.TrpcSampleRsp.msg)
  return _internal_mutable_msg();
}
inline const std::string& TrpcSampleRsp::_internal_msg() const {
  return msg_.Get();
}
inline void TrpcSampleRsp::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TrpcSampleRsp::set_msg(std::string&& value) {
  
  msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trpc.sample.TrpcSampleRsp.msg)
}
inline void TrpcSampleRsp::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:trpc.sample.TrpcSampleRsp.msg)
}
inline void TrpcSampleRsp::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trpc.sample.TrpcSampleRsp.msg)
}
inline std::string* TrpcSampleRsp::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TrpcSampleRsp::release_msg() {
  // @@protoc_insertion_point(field_release:trpc.sample.TrpcSampleRsp.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrpcSampleRsp::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trpc.sample.TrpcSampleRsp.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sample
}  // namespace trpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_trpc_5fsample_5fserver_2eproto
